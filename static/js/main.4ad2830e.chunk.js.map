{"version":3,"sources":["lottery/LotteryField.jsx","lottery/LotteryArea.jsx","lottery/LotteryButtons.jsx","lottery/Lottery.jsx","serviceWorker.js","index.js","lottery/magic-wand.svg"],"names":["LotteryField","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidUpdate","getActiveFields","state","active","selectResult","itemRef","React","createRef","_clickItemField","bind","assertThisInitialized","area","number","setState","classField","react_default","a","createElement","ref","className","onClick","Component","LotteryArea","fields","activeFields","fieldsRefs","filter","item","map","desc","concat","maxfield","_this2","arr","_loop","i","push","lottery_LotteryField","input","key","_renderitemField","_this$state","_renderDesc","LotteryButtons","_this$props","clickFastFill","clickResult","src","magicIcon","alt","Lottery","lockResult","message","areaMainRef","areaExtraRef","lockButtons","array","randomNumber","Math","floor","random","indexOf","length","_area$props","forEach","_gererateArray","_fastFill","current","arrResultMain","arrResultExtra","mainMaches","_checkNumMatches","extraMaches","num","_area$current","arrResult","stateMain","stateExtra","_genererateResult","setTimeout","endGame","_this3","lottery_LotteryArea","lottery_LotteryButtons","_rendMessage","_rendGame","Boolean","window","location","hostname","match","ReactDOM","render","src_lottery_Lottery","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.4ad2830e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass LotteryField extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { active: false, selectResult: false};\n        this.itemRef = React.createRef(); \n        this._clickItemField = this._clickItemField.bind(this);\n    }\n\n    _clickItemField() {\n        const area = this.props.area;\n        const { active } = this.state;\n        const { number } = area.state;\n\n        if (number > 0 || (number === 0 && active)) {\n            this.setState({ active: !active });\n            area.setState({ number:  active ? number + 1 : number - 1});\n        }\n    }\n\n    render() {\n        let classField = 'lottery__item-fields';\n        if (this.state.active) classField += ' lottery__item-fields--active';\n        if (this.state.selectResult) classField += ' lottery__item-fields--result';\n\n        return (\n            <li ref={this.itemRef} \n                className={classField}\n                onClick={this._clickItemField }> \n                {this.props.number}\n            </li>\n        )\n    }\n\n    componentDidUpdate = () =>  this.props.getActiveFields();\n}\n\nexport default LotteryField;","import React, { Component } from 'react';\nimport LotteryField from './LotteryField.jsx';\n\nclass LotteryArea extends Component {\n  constructor(props) {\n      super(props);\n      this.state = { number: 0, fields: [], activeFields: [] };\n      this.fieldsRefs = [];\n\n      this.getActiveFields = this.getActiveFields.bind(this);\n  }\n\n  getActiveFields() {\n    const filter = this.fieldsRefs.filter((item) => item.state.active);\n\n    this.setState({ activeFields: filter.map(item => item.props.number) });\n  }\n\n  _renderDesc(number) {\n    let desc = `Отметьте ${number} `;\n    \n    if(number > 4) {\n      desc += 'чисел';\n    } else if(number > 1) {\n      desc += 'числа';\n    } else if(number === 1) {\n      desc += 'число';\n    } else if(number === 0) {\n      desc = 'Увы но вы не можете больше выбрать';\n    }\n    \n    return desc;\n  }\n\n  _renderitemField(maxfield) { \n    let arr = [];\n\n    for(let i = 0; i < maxfield; i++) {\n      arr.push(\n        <LotteryField ref={(input) => this.fieldsRefs[i] = input} \n                      key={i}  \n                      number={i + 1} \n                      area={ this } \n                      getActiveFields={ this.getActiveFields }/>\n      )\n    }\n\n    return arr;\n  }\n\n  componentWillMount() {\n    const { maxfield } = this.props;\n\n    this.setState({ \n      number: this.props.number,\n      fields: this._renderitemField(maxfield)\n    });\n  }\n\n  render() {\n    const { number, fields } = this.state;\n\n    return (\n      <div className=\"lottery__area\">\n        <div className=\"lottery__area-head\">\n          <p className=\"lottery__area-title\">\n            Первая часть поля\n          </p>\n          <p className=\"lottery__area-desc\">{ this._renderDesc(number) }</p>\n        </div>\n\n        <ul className=\"lottery__list-fields\"> { fields } </ul>\n      </div>\n    )\n  }\n}\n\nexport default LotteryArea;","import React, { Component } from 'react';\nimport magicIcon from './magic-wand.svg';\n\nclass LotteryButtons extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        const {  clickFastFill, clickResult } = this.props;\n\n        return (\n            <div className=\"lottery__buttons\">\n                <button className=\"lottery__button lottery__button-fast-fill\" onClick={ clickFastFill }> \n                    <img className='lottery__icon-fast-fill' src={ magicIcon } alt=\"magic-icon\"/>\n                </button>\n                <button className=\"lottery__button lottery__button-result\" onClick={ clickResult }> \n                    Показать результат  \n                </button>\n            </div>\n        )\n    }\n}\n\nexport default LotteryButtons;","import React, { Component } from 'react';\nimport LotteryArea from \"./LotteryArea.jsx\";\nimport LotteryButtons from './LotteryButtons.jsx';\nimport './Lottery.css';\n\nclass Lottery extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            lockResult: false, \n            message: ''\n        };\n        \n        this.areaMainRef = React.createRef();\n        this.areaExtraRef = React.createRef();\n\n        this.clickFastFill = this.clickFastFill.bind(this);\n        this.clickResult = this.clickResult.bind(this);\n\n        this.lockButtons = false;\n    }\n\n    _gererateArray(number, maxfield) {\n        const array = [];\n\n        while(true) {\n            const randomNumber = Math.floor(Math.random() * maxfield)\n\n            if (!~array.indexOf(randomNumber)) array.push(randomNumber);\n            if (array.length === number) break;\n        }\n\n        return array; \n    }\n\n    _fastFill(area) {\n        const { number, maxfield } =  area.props;\n\n        area.fieldsRefs.forEach(item => item.setState({ active: false }))\n\n        this._gererateArray(number, maxfield).forEach(item => {\n            area.setState({ number: 0 });\n            area.fieldsRefs[item].setState({ active: true })\n        })\n    }\n\n    clickFastFill() {\n        if (!this.lockButtons) {\n            this._fastFill(this.areaMainRef.current);\n            this._fastFill(this.areaExtraRef.current);\n        }\n    }\n\n    _checkNumMatches(area, array) {\n        const { activeFields } = area.state;\n        const arrMatches = array.filter(item => !!~activeFields.indexOf(item + 1))\n\n        return arrMatches.length;\n    }\n\n    endGame(arrResultMain, arrResultExtra) {\n        const mainMaches = this._checkNumMatches(this.areaMainRef.current, arrResultMain);\n        const extraMaches = this._checkNumMatches(this.areaExtraRef.current, arrResultExtra);\n        let message = '';\n\n        if ((mainMaches === 4) || (mainMaches >= 3 && extraMaches === 1)) {\n            message = 'Урааа, вы победили!';\n        } else {\n            message = 'Увы, но вы не выиграли!';\n        }\n\n        this.setState({message, lockResult: true})\n    }\n\n    _genererateResult(area, num) {\n        const { fieldsRefs, props } = area.current;\n        const arrResult = this._gererateArray(num, props.maxfield);\n\n        arrResult.forEach(item => fieldsRefs[item].setState({selectResult: true})); \n\n        return arrResult;\n    }\n\n    clickResult() {\n        const { state: stateMain } = this.areaMainRef.current;\n        const {state: stateExtra } = this.areaExtraRef.current;\n\n        if ((!this.lockButtons) && (stateMain.number === 0 && stateExtra.number === 0)) {\n            const arrResultMain = this._genererateResult(this.areaMainRef, 4); \n            const arrResultExtra = this._genererateResult(this.areaExtraRef, 1);\n\n            this.lockButtons = true;\n\n            setTimeout(() => this.endGame(arrResultMain, arrResultExtra), 2000);\n        }\n    }\n\n    _rendMessage() {\n        if (this.state.lockResult) {\n            return (\n                <div className='lottery__message' onClick={() => this.setState({lockResult: false}) }>\n                    { this.state.message }\n                </div>\n            )\n        }\n    }\n\n    _rendGame() {\n        if (!this.state.lockResult) {\n            return (\n                <div className=\"lottery__game\">\n                    <div className=\"lottery__ticket\">\n                        <LotteryArea ref={this.areaMainRef} number={ 8 } maxfield={ 19 } /> \n                        <LotteryArea ref={this.areaExtraRef} number={ 1 } maxfield={ 2 } /> \n                    </div>\n                    <LotteryButtons  clickFastFill={this.clickFastFill} clickResult={this.clickResult}  />\n                </div>    \n            )\n        }\n    }\n    \n    render() {\n        return (\n            <div className=\"lottery\">\n                <h3 className=\"lottery__head\">Билет</h3>\n\n                { this._rendMessage() }\n                { this._rendGame() }\n            </div>\n        )\n    }\n}\n\nexport default Lottery;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Lottery from './lottery/Lottery.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Lottery />, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/magic-wand.40b66466.svg\";"],"sourceRoot":""}